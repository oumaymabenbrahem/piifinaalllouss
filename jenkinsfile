pipeline {
    agent {
        docker {
            image 'node:18'
            args '-u root'  // Évite les problèmes de permissions
        }
    }
  environment {
        SONARQUBE_CREDENTIALS_ID = "scanner" 
        SONARQUBE_URL = "http://192.168.33.10:9000"
  
    }
    stages {
        /* Étape 1: Installation des dépendances du client */
        stage('Install Client Dependencies') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }

        /* Étape 2: Installation des dépendances du serveur */
        stage('Install Server Dependencies') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }

        /* Étape 3: Tests du client (optionnel) */
        stage('Client Tests') {
            steps {
                dir('client') {
                    script {
                        // Continue même si les tests échouent ou sont absents
                        sh 'npm test || echo "Aucun test client configuré"'
                    }
                }
            }
        }

        /* Étape 4: Tests du serveur (optionnel) */
        stage('Server Tests') {
            steps {
                dir('server') {
                    script {
                        // Continue même si les tests échouent ou sont absents
                        sh 'npm test || echo "Aucun test serveur configuré"'
                    }
                }
            }
        }

stage('SonarQube Analysis') {
    steps {
        script {
            withCredentials([string(credentialsId: "${SONARQUBE_CREDENTIALS_ID}", variable: "SONAR_TOKEN")]) {
                dir('.') {  // Point d'entrée, le répertoire racine du projet
                    // Installer SonarQube Scanner globalement
                    sh 'npm install -g sonarqube-scanner'

                    // Exécuter l'analyse SonarQube pour les dossiers client et server
                    sh """
                    sonar-scanner -Dsonar.projectKey=piapp \
                        -Dsonar.sources=client,server \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=$SONAR_TOKEN
                    """
                }
            }
        }
    }
}








        /* Étape 5: Build du client */
        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm run build'  // Assurez-vous que ce script existe dans package.json
                }
            }
        }
  /* Étape 6: Building images (node et mongo) */
      stage('Building images (node and mongo)') {
            steps {
                script {
                    sh 'docker-compose build'
                }
            }
        }
    


} 

      
    
    post {
        always {
            echo 'Pipeline terminée - Nettoyage'
        }
        success {
            echo 'SUCCÈS : Le déploiement a réussi!'
        }
        failure {
            echo 'ÉCHEC : Vérifiez les logs pour diagnostiquer le problème'
        }
    }
}
