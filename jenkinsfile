pipeline {
    agent {
        docker {
            image 'node:18'
            args '-u root'
        }
    }

    environment {
        SONARQUBE_CREDENTIALS_ID = "sonar"
        SONARQUBE_URL = "http://192.168.33.10:9000"
    }

    stages {
        stage('Install Client Dependencies') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }

        stage('Install Server Dependencies') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }

        stage('Client Tests') {
            steps {
                dir('client') {
                    script {
                        sh 'npm test || echo "Aucun test client configuré"'
                    }
                }
            }
        }

        stage('Server Tests') {
            steps {
                dir('server') {
                    script {
                        sh 'npm test || echo "Aucun test serveur configuré"'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner' // Doit être défini dans Jenkins > Global Tools
                    withSonarQubeEnv("${SONARQUBE_CREDENTIALS_ID}") {
                        sh """
                        ${scannerHome}/bin/sonar-scanner \
                          -Dsonar.projectKey=devops \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONARQUBE_URL} \
                          -Dsonar.login=$SONAR_AUTH_TOKEN
                        """
                    }
                }
            }
        }

        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm run build'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminée - Nettoyage'
        }
        success {
            echo '✅ SUCCÈS : Le déploiement a réussi!'
        }
        failure {
            echo '❌ ÉCHEC : Vérifiez les logs pour diagnostiquer le problème'
        }
    }
}
