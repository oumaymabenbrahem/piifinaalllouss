pipeline {
    agent {
        docker {
            image 'node:18'
            args '-u root'  // Évite les problèmes de permissions
        }
    }
    stages {
        /* Étape 1: Installation des dépendances du client */
        stage('Install Client Dependencies') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }

        /* Étape 2: Installation des dépendances du serveur */
        stage('Install Server Dependencies') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }

        /* Étape 3: Tests du client (optionnel) */
        stage('Client Tests') {
            steps {
                dir('client') {
                    script {
                        // Continue même si les tests échouent ou sont absents
                        sh 'npm test || echo "Aucun test client configuré"'
                    }
                }
            }
        }

        /* Étape 4: Tests du serveur (optionnel) */
        stage('Server Tests') {
            steps {
                dir('server') {
                    script {
                        // Continue même si les tests échouent ou sont absents
                        sh 'npm test || echo "Aucun test serveur configuré"'
                    }
                }
            }
        }

stage('SonarQube Analysis') {
    steps {
        script {
            def scannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
            withSonarQubeEnv('sonar') {
                sh "${scannerHome}/bin/sonar-scanner"
            }
        }
    }
}


        /* Étape 5: Build du client */
        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm run build'  // Assurez-vous que ce script existe dans package.json
                }
            }
        }

      
    }
    post {
        always {
            echo 'Pipeline terminée - Nettoyage'
        }
        success {
            echo 'SUCCÈS : Le déploiement a réussi!'
        }
        failure {
            echo 'ÉCHEC : Vérifiez les logs pour diagnostiquer le problème'
        }
    }
}
