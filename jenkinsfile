pipeline {
    agent {
        docker {
            image 'node:18'
            args '-u root'
        }
    }
    environment {
        // Configuration SonarQube
        SONAR_SCANNER_HOME = tool 'scanner'  
        SONAR_PROJECT_KEY = 'piapp'
       
    }
    stages {
        /* Installation des dépendances */
        stage('Install Client Dependencies') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }

        stage('Install Server Dependencies') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }

        /* Tests (optionnels) */
        stage('Client Tests') {
            steps {
                dir('client') {
                    sh 'npm test || echo "Aucun test client configuré"'
                }
            }
        }

        stage('Server Tests') {
            steps {
                dir('server') {
                    sh 'npm test || echo "Aucun test serveur configuré"'
                }
            }
        }

        /* Analyse SonarQube */
        stage('SonarQube Analysis') {
            when {
                expression { return env.SONAR_HOST_URL != null }
            }
            steps {
                withSonarQubeEnv('SonarQube') {  
                    script {
                        sh """
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_AUTH_TOKEN} \
                            -Dsonar.javascript.node=18
                        """
                    }
                }
            }
        }

        /* Build et Déploiement */
        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm run build'
                }
            }
        }

        stage('Start Server') {
            steps {
                dir('server') {
                    sh 'npm start'
                }
            }
        }
    }
    post {
        always {
            echo 'Nettoyage après exécution'
        }
        success {
            echo 'SUCCÈS : Pipeline terminée avec succès'
        }
        failure {
            echo 'ÉCHEC : Vérifiez les logs pour les erreurs'
        }
    }
}
