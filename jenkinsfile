pipeline {
    agent {
        docker {
            image 'node:18'
            args '-u root --network=host'
        }
    }
    environment {
        SONAR_SCANNER_HOME = tool 'scanner' 
        SONAR_PROJECT_KEY = 'piapp'
        SONAR_PROJECT_NAME = 'Mon Projet'
        SONAR_SOURCES = 'src'
    }
    stages {
        /* Installation des dépendances */
        stage('Install Dependencies') {
            parallel {
                stage('Client') {
                    steps {
                        dir('client') {
                            sh 'npm ci'
                        }
                    }
                }
                stage('Server') {
                    steps {
                        dir('server') {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }

        /* Tests */
        stage('Run Tests') {
            parallel {
                stage('Client Tests') {
                    steps {
                        dir('client') {
                            script {
                                sh 'npm test || echo "Aucun test client configuré"'
                            }
                        }
                    }
                }
                stage('Server Tests') {
                    steps {
                        dir('server') {
                            script {
                                sh 'npm test || echo "Aucun test serveur configuré"'
                            }
                        }
                    }
                }
            }
        }

        /* Analyse SonarQube */
        stage('Analyse SonarQube') {
            when {
                expression { return env.SONAR_HOST_URL != null }
            }
            steps {
                withSonarQubeEnv('scanner') {
                    script {
                        try {
                            sh """
                                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONAR_AUTH_TOKEN} \
                                -Dsonar.sources=${SONAR_SOURCES} \
                                -Dsonar.javascript.node=18
                            """
                        } catch (err) {
                            echo "Erreur SonarQube: ${err}"
                            // Ne pas faire échouer le pipeline pour cette étape
                        }
                    }
                }
            }
        }

        /* Build Client */
        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm run build'
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                }
            }
        }
    }
    post {
        always {
            echo 'Nettoyage terminé'
        }
        success {
            echo '✅ Pipeline réussie'
        }
        failure {
            echo '❌ Pipeline échouée'
        }
    }
}
