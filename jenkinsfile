pipeline {
    agent {
        docker {
            image 'node:18'
            args '--privileged -v /var/run/docker.sock:/var/run/docker.sock -u root'
        }
    }

    environment {
        SONARQUBE_CREDENTIALS_ID = "scanner"
        SONARQUBE_URL = "http://192.168.33.10:9000"
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
    }

    stages {
        stage('Install Docker') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y docker.io
                '''
            }
        }

        stage('Install Client Dependencies') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }

        stage('Install Server Dependencies') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }

        stage('Client Tests') {
            steps {
                dir('client') {
                    script {
                        sh 'npm test || echo "Aucun test client configuré"'
                    }
                }
            }
        }

        stage('Server Tests') {
            steps {
                dir('server') {
                    script {
                        sh 'npm test || echo "Aucun test serveur configuré"'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withCredentials([string(credentialsId: "${SONARQUBE_CREDENTIALS_ID}", variable: "SONAR_TOKEN")]) {
                        sh 'npm install -g sonarqube-scanner'
                        sh """
                            sonar-scanner \
                                -Dsonar.projectKey=piapp \
                                -Dsonar.sources=client,server \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }

        stage('Build Client') {
            steps {
                dir('client') {
                    sh 'npm run build'
                }
            }
        }

        stage('Building images (node and mongo)') {
            steps {
                sh 'docker compose up -d'
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminée - Nettoyage'
        }
        success {
            echo 'SUCCÈS : Le déploiement a réussi!'
        }
        failure {
            echo 'ÉCHEC : Vérifiez les logs pour diagnostiquer le problème'
        }
    }
}
